- Add data where the images are not embedded with the QR code (Return an array with all zeroes value which represents that this images is not embedded with QR code )


- Instead of training the decoder to recover the embedded QR , create a CNN classifier instead of decoder that can classify if 
pattern are embedded or not 

- Use a moiree pattern that should be embedded in repeating manner across the entire images and the verification engine should just check
that whether there is some pattern present or not in the image


- Use different loss while training
Perceptual Loss (VGG-based loss) – Ensures perceptual similarity.
L1 or SSIM Loss – Encourages structural similarity.
Adversarial Loss (if using GANs) – Helps fool the discriminator.

- . Implement Real-World Testing
After training:

Print & scan your watermarked images using a mobile phone.
Ensure extraction still works after compression, printing, and capturing.


- Adversarial Training with a Discriminator
 Train a GAN-based discriminator to ensure that encoded images are indistinguishable from originals.
 This helps prevent visible artifacts in the printed version.


- use error correction (Reed-Solomon codes) to improve retrieval accuracy.

- For an image augment more data

